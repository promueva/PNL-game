***(

File: semantics.maude 

Rewrite rules encoding the game semantics for PNL

***)

load ./syntax .


mod GAME-SEMANTICS is
    pr GAME-STATE .

    --- -------------------------------
    var PLAYER        : Player .
    vars i j          : Nominal .
    vars a b c        : Agent .
    vars STREE STREE' : STree .
    vars F G          : Formula .
    vars RELS+ RELS-  : SetRelation .
    vars RELS         : SetRelation .
    vars AG  AG' AG'' : Agent .
    var SETAG         : SetAgent .
    var MODEL         : Model .
    var ATOM          : Atom .
    var YTREE         : YTree .
    var ITREE         : ITree .
    var ?TREE         : ?Tree .
    vars MB YB        : Nat .
    --- -------------------------------

    --- ------
    --- Atoms
    --- ------

    rl [ATOM]  : < MODEL : P @ a : ATOM > =>
                 if val(a, ATOM) then I< MODEL : P @ a : ATOM : I(nil) >
                 else Y< MODEL : P @ a : ATOM : I(nil) >
                 fi .

    rl [ATOM]  : < MODEL : O @ a : ATOM > =>
                 if val(a, ATOM) then Y< MODEL : O @ a : ATOM : Y(nil) >
                 else I< MODEL : O @ a : ATOM : Y(nil) >
                 fi .

    --- -----------
    --- Conjunction 
    --- -----------
    
    rl [Y] : < MODEL :  P @ a : F /\ G > =>
             < MODEL :  P @ a : F /\ G :  
                        Y(< MODEL :  P @ a : F  > ; < MODEL :  P @ a : G  >) > .

    
    rl [I] :
             < MODEL :  O @ a : F /\ G > =>
             < MODEL :  O @ a : F /\ G :  I(< MODEL :  O @ a : F  > ; < MODEL :  O @ a : G  >) > .

    --- -----------
    --- Disjunction
    --- -----------

    rl [Y] : < MODEL :  O @ a : F \/ G > =>
             < MODEL :  O @ a : F \/ G :  
                        Y(< MODEL :  O @ a : F  > ; 
                          < MODEL :  O @ a : G  >) > .

    rl [I] : 
          < MODEL :  P @ a : F \/ G > =>
          < MODEL :  P @ a : F \/ G :  I(< MODEL :  P @ a : F  > ; < MODEL :  P @ a : G  >) > .

    --- -----------
    --- Negation
    --- -----------

    rl [NEG] : < MODEL :  P @ a : ~ F > =>
               < MODEL :  P @ a : ~ F : I(< MODEL : O @ a : F >) > .

    rl [NEG] : < MODEL :  O @ a : ~ F > =>
               < MODEL :  O @ a : ~ F : I(< MODEL : P @ a : F >) > .


    --- --------
    --- Diamond
    --- --------

    --- + successors is never empty
    crl [Y] : < { R+{ RELS+ } , R-{ RELS- }} : O @ a : <+> F > =>
              < { R+{ RELS+ } , R-{ RELS- }} : O @ a : <+> F : 
                  Y(next(O, RELS+, RELS-, SETAG, F))  >
    if SETAG := succ(a, RELS+) .

    --- - successors can be empty
    crl [Y] : < { R+{ RELS+ } , R-{ RELS- } } : O @ a : <-> F > =>
                    if | SETAG | == 0
                    then  I< { R+{ RELS+ } , R-{ RELS- } } : O @ a : <-> F : Y(nil) > 
                    else   < { R+{ RELS+ } , R-{ RELS- } } : O @ a : <-> F : 
                           Y(next(O, RELS+, RELS-, SETAG, F))  >
                    fi
    if SETAG := succ(a, RELS-) .


    --- + successors is never empty
    crl [I] : < { R+{ RELS+ } , R-{ RELS- } } : P @ a : <+> F > =>
              < { R+{ RELS+ } , R-{ RELS- } } : P @ a : <+> F : 
                  I(next(P, RELS+, RELS-, SETAG, F))  >
    if SETAG := succ(a, RELS+) .

    --- - successors can be empty 
    crl [I] : < { R+{ RELS+ } , R-{ RELS- } } : P @ a : <-> F > =>
                    if | SETAG | == 0
                    then  Y< { R+{ RELS+ } , R-{ RELS- } } : P @ a : <-> F : I(nil) > 
                    else   < { R+{ RELS+ } , R-{ RELS- } } : P @ a : <-> F : 
                           I(next(P, RELS+, RELS-, SETAG, F))  >
                    fi
    if SETAG := succ(a, RELS-) .

    --- ------------
    --- Global
    --- -----------

    rl [Y] : < { R+{ RELS+ } , R-{ RELS- } } : P @ a : [A] F > =>
             < { R+{ RELS+ } , R-{ RELS- } } : P @ a : [A] F : Y(global(P, RELS+, RELS-, F)) > .


    rl [I] : < { R+{ RELS+ } , R-{ RELS- } } : O @ a : [A] F > =>
             < { R+{ RELS+ } , R-{ RELS- } } : 
             O @ a : [A] F : I(global(P, RELS+, RELS-, F)) > .

    
    --- ------------------
    --- Dynamic operators
    --- ------------------
    crl [Y] : < { R+{ RELS+ } , R-{ RELS- }} : O @ a : (+) F > =>
                  if | SETAG | == 0 
                      then I< { R+{ RELS+ } , R-{ RELS- }} : O @ a : (+) F : Y(nil) >
                      else  < { R+{ RELS+ } , R-{ RELS- }} : O @ a : (+) F : 
                      Y(next-to+(a, O, RELS+, RELS-, SETAG, F))  >
                  fi 
    if SETAG := succ(a, RELS-) .

    crl [Y] : < { R+{ RELS+ } , R-{ RELS- }} : O @ a : (-) F > =>
                  if | SETAG | == 0 
                      then I< { R+{ RELS+ } , R-{ RELS- }} : O @ a : (-) F : Y(nil) >
                      else  < { R+{ RELS+ } , R-{ RELS- }} : O @ a : (-) F : 
                      Y(next-to-(a, O, RELS+, RELS-, SETAG, F))  >
                  fi 
    if SETAG := succ(a, RELS+) \ (a) .

    crl [I] : < { R+{ RELS+ } , R-{ RELS- }} : P @ a : (+) F > =>
                  if | SETAG | == 0 
                      then Y< { R+{ RELS+ } , R-{ RELS- }} : P @ a : (+) F : I(nil) >
                      else  < { R+{ RELS+ } , R-{ RELS- }} : P @ a : (+) F : 
                      I(next-to+(a, P, RELS+, RELS-, SETAG, F))  >
                  fi 
    if SETAG := succ(a, RELS-) .

    crl [I] : < { R+{ RELS+ } , R-{ RELS- }} : P @ a : (-) F > =>
                  if | SETAG | == 0 
                      then Y< { R+{ RELS+ } , R-{ RELS- }} : P @ a : (-) F : I(nil) >
                      else  < { R+{ RELS+ } , R-{ RELS- }} : P @ a : (-) F : 
                      I(next-to-(a, P, RELS+, RELS-, SETAG, F))  >
                  fi 
    if SETAG := succ(a, RELS+) \ (a) .


     op global : Player SetRelation SetRelation Formula -> STree .
     op global : SetAgent Player SetRelation SetRelation Formula -> STree .
     eq global(PLAYER, RELS+, RELS-, F) = global(agents, PLAYER, RELS+ , RELS-, F) .
     eq global(empty, PLAYER, RELS+, RELS-, F) = nil .
     eq global((AG, SETAG), PLAYER, RELS+, RELS-, F) = < { R+{ RELS+ } , R-{ RELS- }} : PLAYER @ AG : F >  ;
                                                       global(SETAG, PLAYER, RELS+, RELS-,  F) .


    --- Rules controlling the shape of the tree

    --- If you win one, then you won that state 
    rl [TREE]  : < MODEL : PLAYER @ AG : F : Y( YTREE   ; STREE) > =>
                    Y< MODEL : PLAYER @ AG : F : Y( YTREE ) > .

    --- If I win one, then I won that state 
    rl [TREE]  : < MODEL : PLAYER @ AG : F : I( ITREE   ; STREE) > =>
                    I< MODEL : PLAYER @ AG : F : I( ITREE ) > .


    --- If all of YOUR choices are ITrees, then I win
    crl [TREE]  : < MODEL : PLAYER @ AG : F : Y(STREE) > =>
                     I< MODEL : PLAYER @ AG : F : Y(STREE) > 
        if all-ITrees(STREE) .

    --- If all of MY choices are YTrees, then Y win
    crl [TREE]  : < MODEL : PLAYER @ AG : F :  I(STREE) > =>
                     Y< MODEL : PLAYER @ AG : F : I(STREE) > 
        if all-YTrees(STREE) .

    --- These set of rules are as the previous ones but no decision is discarded
    --- This is useful to explore all the search tree
    rl [TREE-ALL]  : < MODEL : PLAYER @ AG : F : Y( YTREE   ; STREE) > =>
                    Y< MODEL : PLAYER @ AG : F : Y( YTREE   ; STREE) > .

    --- If I win one, then I won that state 
    rl [TREE-ALL]  : < MODEL : PLAYER @ AG : F : I( ITREE   ; STREE) > =>
                    I< MODEL : PLAYER @ AG : F : I( ITREE   ; STREE) > .


    --- If all of YOUR choices are ITrees, then I win
    crl [TREE-ALL]  : < MODEL : PLAYER @ AG : F : Y(STREE) > =>
                     I< MODEL : PLAYER @ AG : F : Y(STREE) > 
        if all-ITrees(STREE) .

    --- If all of MY choices are YTrees, then Y win
    crl [TREE-ALL]  : < MODEL : PLAYER @ AG : F :  I(STREE) > =>
                     Y< MODEL : PLAYER @ AG : F : I(STREE) > 
        if all-YTrees(STREE) .



    --- Successor states for diamond formulas
    op next : Player SetRelation SetRelation SetAgent Formula -> STree .
    eq next(PLAYER, RELS+, RELS-, empty, F) = nil .
    eq next(PLAYER, RELS+, RELS-, (AG, SETAG), F) = < { R+{ RELS+ }, R-{ RELS- }} : PLAYER @ AG : F > ; 
       next(PLAYER, RELS+, RELS-, SETAG, F) .

    --- Successor states for (+) formulas
    op next-to+ : Agent Player SetRelation SetRelation SetAgent Formula -> STree .
    eq next-to+(AG, PLAYER, RELS+, RELS-, empty, F) = nil .
    eq next-to+(AG, PLAYER, RELS+, RELS-, (AG', SETAG), F) = 
     < { R+{ RELS+ , ( AG, AG' ) }, R-{ RELS- \ ( (AG, AG') ) }} : PLAYER @ AG : F > ; 
     next-to+(AG, PLAYER, RELS+, RELS-, SETAG, F) .

    --- Successor states for (-) formulas
    op next-to- : Agent Player SetRelation SetRelation SetAgent Formula -> STree .
    eq next-to-(AG, PLAYER, RELS+, RELS-, empty, F) = nil .
    eq next-to-(AG, PLAYER, RELS+, RELS-, (AG', SETAG), F) = 
     < { R+{ RELS+ \ ( AG, AG' ) }, R-{ RELS- , ( (AG, AG') ) }} : PLAYER @ AG : F > ; 
     next-to-(AG, PLAYER, RELS+, RELS-, SETAG, F) .


    --- Successor worlds given a relation
    op succ : Agent SetRelation -> SetAgent .
    eq succ(AG, empty) = empty .
    eq succ(AG, ((AG, AG') , RELS)) = AG' , succ(AG, RELS) .
    eq succ(AG, ((AG', AG'') , RELS)) = succ(AG, RELS) [owise] .

    --- Checking if all the elements of a non-empty list of trees are Y-trees
    op all-YTrees : STree -> Bool .
    eq all-YTrees(nil) = false .
    eq all-YTrees((?TREE ; STREE)) = false .
    eq all-YTrees((ITREE ; STREE)) = false .
    eq all-YTrees(STREE) = true [owise] .

    --- Checking if all the elements of a non-empty list of trees are I-trees
    op all-ITrees : STree -> Bool .
    eq all-ITrees(nil) = false .
    eq all-ITrees((?TREE ; STREE)) = false .
    eq all-ITrees((YTREE ; STREE)) = false .
    eq all-ITrees(STREE) = true [owise] .

    --- The reflexive closure 
    op reflex : SetAgent -> SetRelation .
    eq reflex( (AG, SETAG)) = (AG, AG) , reflex(SETAG) .
    eq reflex(empty) = empty .
endm
